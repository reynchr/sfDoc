# Project Metadata
# Defines core project information and package structure
[tool.poetry]
name = "salesforce-analyzer"                # Package name on PyPI
version = "0.1.0"                           # Semantic versioning
description = "A comprehensive tool for analyzing and documenting Salesforce org metadata and automations"
authors = ["Chris Reynolds : <reynchr@gmail.com>"]
readme = "README.md"                        # Project documentation file
packages = [{include = "src"}]              # Source code location

# Main Project Dependencies
# Core packages required for runtime operation
[tool.poetry.dependencies]
python = "^3.12"                            # Minimum Python version required
pyyaml = "^6.0"                             # YAML parsing for configuration
click = "^8.1.3"                            # CLI framework
rich = "^13.3.1"                            # Terminal formatting and output
requests = "^2.28.2"                        # HTTP client for API calls
pandas = "^2.0.0"                           # Data manipulation and analysis
networkx = "^3.0"                           # Graph operations for path analysis
torch = "^2.0.0"                            # PyTorch for ML operations
transformers = "^4.27.0"                    # Hugging Face Transformers
simple-salesforce = "^1.12.1"               # Salesforce API client
mermaid-py = "^0.1.1"                       # Mermaid diagram generation
typing-extensions = "^4.5.0"                # Enhanced type hinting
python-dotenv = "^1.0.0"                    # Environment variable management
accelerate = ">=0.26.0"                     # GPU acceleration for transformers

# Development Dependencies
# Packages needed for development, testing, and code quality
[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"                           # Testing framework
pytest-cov = "^4.0.0"                       # Code coverage reporting
black = "^23.3.0"                           # Code formatting
isort = "^5.12.0"                           # Import sorting
mypy = "^1.3.0"                             # Static type checking
pylint = "^2.17.0"                          # Code linting
pre-commit = "^3.2.0"                       # Git hooks management
pytest-mock = "^3.10.0"                     # Mocking for tests
pytest-asyncio = "^0.21.0"                  # Async test support
bandit = "^1.7.5"                           # Security linting

# Build System Configuration
# Poetry build settings
[build-system]
requires = ["poetry-core"]                  # Core build requirements
build-backend = "poetry.core.masonry.api"   # Build backend specification

# CLI Entry Point
# Defines the command-line interface entry point
[tool.poetry.scripts]
salesforce-analyzer = "src.cli:cli"         # CLI command mapping

# Code Formatting Configuration
# Black formatter settings
[tool.black]
line-length = 100                           # Maximum line length
target-version = ['py38']                   # Target Python version
include = '\.pyi?$'                         # Files to format

# Import Sorting Configuration
# isort settings
[tool.isort]
profile = "black"                           # Use Black compatibility
multi_line_output = 3                       # Import formatting style
line_length = 100                           # Match Black's line length

# Type Checking Configuration
# mypy settings for static type analysis
[tool.mypy]
python_version = "3.8"                      # Python version for type checking
warn_return_any = true                      # Warn about untyped returns
warn_unused_configs = true                  # Warn about unused configs
disallow_untyped_defs = true                # Require type annotations
disallow_incomplete_defs = true             # Require complete type annotations
check_untyped_defs = true                   # Check body of untyped functions
disallow_untyped_decorators = false         # Allow untyped decorators
no_implicit_optional = true                 # No implicit Optional types
warn_redundant_casts = true                 # Warn about unnecessary type casts
warn_unused_ignores = true                  # Warn about unused type ignores
warn_no_return = true                       # Warn about missing returns
warn_unreachable = true                     # Warn about unreachable code

# Linting Configuration
# pylint settings for code analysis
[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring        - Disabled as we use module docstrings
    "R0903",  # too-few-public-methods   - Allow small classes
    "C0103",  # invalid-name             - Allow flexible naming
    "R0913",  # too-many-arguments       - Allow complex functions
    "R0914",  # too-many-locals          - Allow complex implementations
]

# Testing Configuration
# pytest settings
[tool.pytest.ini_options]
minversion = "6.0"                      # Minimum pytest version
addopts = "-ra -q --cov=src"            # Default test options
testpaths = [
    "tests",                            # Test directory location
]